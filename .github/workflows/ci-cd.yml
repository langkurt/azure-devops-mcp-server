name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/**, release/**]
  pull_request:
    branches: [main, develop]

env:
  # Registry configuration - can be overridden via repository variables/secrets
  REGISTRY: ${{ vars.CONTAINER_REGISTRY || 'ghcr.io' }}
  # Image name will be automatically constructed from repository owner and name
  IMAGE_NAME: ${{ vars.CONTAINER_REGISTRY || 'ghcr.io' }}/${{ github.repository_owner }}/${{ github.event.repository.name }}
  # Python version - can be customized via repository variables
  PYTHON_VERSION: ${{ vars.PYTHON_VERSION || '3.11' }}

jobs:
  lint-and-audit:
    name: Lint & Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
       
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
       
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
       
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install from requirements.txt if it exists
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Install development dependencies if they exist
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          fi
          # Install linting and security tools
          pip install flake8 pip-audit
       
      - name: Lint code
        run: |
          # Use project-specific flake8 config if available, otherwise use defaults
          if [ -f .flake8 ] || [ -f setup.cfg ] || [ -f tox.ini ]; then
            flake8 .
          else
            flake8 . --max-line-length=350 --ignore=W291,W292
          fi
       
      - name: Python Dependency Security Audit
        run: pip-audit
        # continue-on-error: ${{ github.event_name == 'pull_request' }}
        continue-on-error: true

  generate-version:
    name: Generate Version Tag
    runs-on: ubuntu-latest
    needs: lint-and-audit
    outputs:
      version: ${{ steps.version.outputs.version }}
      full-version: ${{ steps.version.outputs.full-version }}
      should-tag: ${{ steps.version.outputs.should-tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for proper versioning
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate version
        id: version
        run: |
          # Get the latest tag that matches v*.*.* pattern
          LATEST_TAG=$(git tag -l "v*.*.*" | sort -V | tail -n1)
          
          if [ -z "$LATEST_TAG" ]; then
            # No previous tags, start with v1.0.0
            MAJOR=1
            MINOR=0
            PATCH=0
          else
            # Extract version numbers from latest tag
            VERSION_NUM=$(echo $LATEST_TAG | sed 's/v//')
            MAJOR=$(echo $VERSION_NUM | cut -d'.' -f1)
            MINOR=$(echo $VERSION_NUM | cut -d'.' -f2)
            PATCH=$(echo $VERSION_NUM | cut -d'.' -f3)
          fi
          
          SHOULD_TAG="false"
          
          # Increment version based on branch and event type
          if [[ "${{ github.ref }}" == "refs/heads/main" && "${{ github.event_name }}" == "push" ]]; then
            # Main branch push: increment minor version
            MINOR=$((MINOR + 1))
            PATCH=0
            SHOULD_TAG="true"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" && "${{ github.event_name }}" == "push" ]]; then
            # Develop branch push: increment patch version
            PATCH=$((PATCH + 1))
            SHOULD_TAG="true"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # Feature/release branch push: increment patch version with branch suffix
            PATCH=$((PATCH + 1))
            BRANCH_NAME=$(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9]/-/g')
            NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}-${BRANCH_NAME}"
            FULL_VERSION="${NEW_VERSION}.${GITHUB_SHA:0:8}"
            echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
            echo "full-version=${FULL_VERSION}" >> $GITHUB_OUTPUT
            echo "should-tag=${SHOULD_TAG}" >> $GITHUB_OUTPUT
            echo "Generated branch version: $NEW_VERSION"
            exit 0
          else
            # Pull request: use current version with PR suffix
            NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}-pr${{ github.event.number }}"
            FULL_VERSION="${NEW_VERSION}.${GITHUB_SHA:0:8}"
            echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
            echo "full-version=${FULL_VERSION}" >> $GITHUB_OUTPUT
            echo "should-tag=${SHOULD_TAG}" >> $GITHUB_OUTPUT
            echo "Generated PR version: $NEW_VERSION"
            exit 0
          fi
          
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          FULL_VERSION="${NEW_VERSION}.${GITHUB_SHA:0:8}"
          
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "full-version=${FULL_VERSION}" >> $GITHUB_OUTPUT
          echo "should-tag=${SHOULD_TAG}" >> $GITHUB_OUTPUT
          echo "Generated version: $NEW_VERSION"
          echo "Full version: $FULL_VERSION"

  docker-build-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-audit, generate-version]
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
       
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
       
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.generate-version.outputs.version }}
            type=raw,value=${{ needs.generate-version.outputs.full-version }}
            type=ref,event=branch
            type=ref,event=pr
       
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Create Git tag
        if: needs.generate-version.outputs.should-tag == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ needs.generate-version.outputs.version }}
          git push origin ${{ needs.generate-version.outputs.version }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [docker-build-push, generate-version]
    permissions:
      contents: read
      packages: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Convert image name to lowercase
        id: image-name
        run: |
          LOWERCASE_NAME=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          echo "lowercase-name=${LOWERCASE_NAME}" >> $GITHUB_OUTPUT
          echo "Using image name: ${LOWERCASE_NAME}"
      
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
       
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
       
      - name: Pull image from registry
        run: docker pull ${{ steps.image-name.outputs.lowercase-name }}:${{ needs.generate-version.outputs.version }}
       
      - name: Run Trivy vulnerability scanner
        run: |
          trivy image \
            --format sarif \
            --output trivy-results.sarif \
            ${{ steps.image-name.outputs.lowercase-name }}:${{ needs.generate-version.outputs.version }}
        continue-on-error: true
       
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif